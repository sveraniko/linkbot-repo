from __future__ import annotations
from aiogram import Router, F
from aiogram.types import CallbackQuery, ForceReply, InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from app.db import get_session
from app.models import BotMessage, Artifact
from app.config import settings
from app.services.memory import get_active_project

router = Router()

# -- SAVE --
@router.callback_query(F.data.startswith("ans:save:"))
async def ans_save(cb: CallbackQuery, session: AsyncSession = get_session()):
    st = await anext(session)
    msg_id = int(cb.data.split(":")[-1])
    bm = await st.scalar(select(BotMessage).where(BotMessage.tg_message_id==msg_id))
    if not bm:
        await cb.answer("Message not found", show_alert=True); return
    if bm.saved and bm.artifact_id:
        await cb.answer("Already saved"); return
    # —Å–ø—Ä–æ—Å–∏–º —Ç–µ–≥–∏
    await cb.message.answer("–£–∫–∞–∂–∏ —Ç–µ–≥–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=ForceReply(selective=True))
    await cb.answer()

# –•—ç–Ω–¥–ª–µ—Ä ForceReply –¥–ª—è —Ç–µ–≥–æ–≤ (–ø—Ä–∏–≤—è–∂–µ–º –ø–æ reply_to_message)
@router.message(F.reply_to_message & F.reply_to_message.text.regexp("^–£–∫–∞–∂–∏ —Ç–µ–≥–∏"))
async def tags_reply(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    # –Ω–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Ä—è–¥–æ–º (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: –≤–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ BotMessage –ø–æ user_id)
    if not message.from_user:
        return
    result = await st.execute(select(BotMessage).where(BotMessage.user_id==message.from_user.id).order_by(BotMessage.created_at.desc()).limit(1))
    bm = result.scalars().first()
    if not bm:
        return await message.answer("–ù–µ –Ω–∞—à—ë–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    tags = [t.strip() for t in (message.text or "").split(",") if t.strip()]
    proj = await get_active_project(st, message.from_user.id)
    art = Artifact(project_id=bm.project_id or (proj.id if proj else None),
                   kind="answer", title="Chat answer", raw_text="", # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                   )
    st.add(art); await st.flush()
    bm.artifact_id = art.id; bm.saved = True
    st.add(bm); await st.commit()
    await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (artifact #{art.id}).")

# -- SUMMARY (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) --
@router.callback_query(F.data.startswith("ans:sum:"))
async def ans_summary(cb: CallbackQuery, session: AsyncSession = get_session()):
    st = await anext(session)
    msg_id = int(cb.data.split(":")[-1])
    result = await st.execute(select(BotMessage).where(BotMessage.tg_message_id==msg_id))
    bm = result.scalars().first()
    if not bm:
        await cb.answer("Message not found", show_alert=True); return
    # –ø–æ–ª—É—á–∏–º —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    text = cb.message.text or cb.message.caption or ""
    # –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ answer
    if not bm.saved or not bm.artifact_id:
        base = Artifact(project_id=bm.project_id, kind="answer", title="Chat answer", raw_text=text, pinned=True)
        st.add(base); await st.flush()
        bm.artifact_id = base.id; bm.saved = True
    else:
        base = await st.get(Artifact, bm.artifact_id)
        if base:
            base.pinned = True
    # —Å–æ–∑–¥–∞—ë–º summary
    from app.llm import ask_llm
    summary = await ask_llm(f"Summarize this text: {text}", [], model="gpt-5")  # –≤–Ω—É—Ç—Ä–∏ llm –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —Å–∞–º (–∏–ª–∏ –≤–æ–∑—å–º–∏ preferred)
    summ = Artifact(project_id=bm.project_id, kind="summary", title="Summary", raw_text=summary, pinned=True, parent_id=bm.artifact_id)
    st.add(summ); await st.commit()
    if cb.message:
        await cb.message.edit_reply_markup(reply_markup=None)
        await cb.message.answer("üìå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞.")

# -- TAG --
@router.callback_query(F.data.startswith("ans:tag:"))
async def ans_tag(cb: CallbackQuery, session: AsyncSession = get_session()):
    st = await anext(session)
    msg_id = int(cb.data.split(":")[-1])
    result = await st.execute(select(BotMessage).where(BotMessage.tg_message_id==msg_id))
    bm = result.scalars().first()
    if not bm or not bm.artifact_id:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç (Save).", show_alert=True); return
    await cb.message.answer("–ù–æ–≤—ã–µ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=ForceReply(selective=True))
    await cb.answer()

# -- DELETE --
@router.callback_query(F.data.startswith("ans:del:"))
async def ans_del(cb: CallbackQuery, session: AsyncSession = get_session()):
    st = await anext(session)
    msg_id = int(cb.data.split(":")[-1])
    result = await st.execute(select(BotMessage).where(BotMessage.tg_message_id==msg_id))
    bm = result.scalars().first()
    if not bm:
        await cb.answer("Message not found", show_alert=True); return
    if bm.saved and bm.artifact_id:
        # —Å–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏ –∏ —á–∞—Ç–∞", callback_data=f"ans:delmem:{msg_id}:yes"),
            InlineKeyboardButton(text="–¢–æ–ª—å–∫–æ –∏–∑ —á–∞—Ç–∞", callback_data=f"ans:delmem:{msg_id}:no"),
        ]])
        await cb.message.answer("–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å?", reply_markup=kb)
        await cb.answer(); return
    # –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        await cb.message.delete()
    except:
        pass
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ")

@router.callback_query(F.data.startswith("ans:delmem:"))
async def ans_delmem(cb: CallbackQuery, session: AsyncSession = get_session()):
    st = await anext(session)
    _, _, msg_id, choice = cb.data.split(":")
    msg_id = int(msg_id)
    result = await st.execute(select(BotMessage).where(BotMessage.tg_message_id==msg_id))
    bm = result.scalars().first()
    if not bm:
        return await cb.answer("Not found")
    if choice == "yes" and bm.artifact_id:
        await st.execute(delete(Artifact).where(Artifact.id==bm.artifact_id))
        await st.commit()
    try:
        await cb.message.delete()
    except:
        pass
    await cb.answer("–ì–æ—Ç–æ–≤–æ")

# -- REFINE (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: —Å–ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–≥–æ)
@router.callback_query(F.data.startswith("ans:ref:"))
async def ans_ref(cb: CallbackQuery, session: AsyncSession = get_session()):
    await cb.message.answer("–ß—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å?", reply_markup=ForceReply(selective=True))
    await cb.answer()