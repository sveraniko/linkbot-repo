from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from app.db import get_session
from app.config import settings
from app.services.memory import (
    get_active_project, get_chat_flags, get_context_filters_state, get_linked_project_ids,
    gather_context_sources, get_preferred_model,
)
from app.models import BotMessage
from app.llm import ask_llm
from html import escape

router = Router()

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–≥–æ–≤
TAG_PROMPT_PREFIX = "–°–≤–æ–∏ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"

def answer_kb(msg_id: int, saved: bool):
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: Save / Summary / Tag / Delete / Refine
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=("‚úÖ Saved" if saved else "üíæ Save"), callback_data=f"ans:save:{msg_id}"),
        InlineKeyboardButton(text="üìå Summary", callback_data=f"ans:sum:{msg_id}"),
        InlineKeyboardButton(text="üè∑ Tag", callback_data=f"ans:tag:{msg_id}"),
    ],[
        InlineKeyboardButton(text="üóë Delete", callback_data=f"ans:del:{msg_id}"),
        InlineKeyboardButton(text="‚Ü© Refine", callback_data=f"ans:ref:{msg_id}"),
    ]])

@router.message(F.text & ~F.text.startswith("/"))
async def on_free_text(message: Message):
    from app.db import session_scope
    async with session_scope() as st:
        if not message.from_user:
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à —Ñ–æ—Ä—Å-–ø—Ä–æ–º–ø—Ç —Ç–µ–≥–æ–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º,
        # –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç tags_free_reply
        if message.reply_to_message and (
            (message.reply_to_message.text or "").startswith(TAG_PROMPT_PREFIX) or
            (message.reply_to_message.text or "").startswith("–°–≤–æ–∏ —Ç–µ–≥–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        ):
            return

        chat_on, quiet_on, sources_mode, scope_mode = await get_chat_flags(st, message.from_user.id)
        if quiet_on:
            return
        if not chat_on:
            # –æ–¥–∏–Ω –º—è–≥–∫–∏–π —Ö–∏–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏, –Ω–æ –¥–ª—è MVP –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º
            return await message.answer("üí° –í–∫–ª—é—á–∏ —á–∞—Ç: –Ω–∞–∂–º–∏ ¬´üí¨ Chat¬ª –Ω–∞ —Å–∏–Ω–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /actions ‚Üí Quiet OFF.")
        proj = await get_active_project(st, message.from_user.id)
        kinds, tags = await get_context_filters_state(st, message.from_user.id)
        linked_ids = await get_linked_project_ids(st, message.from_user.id)

        # –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        ctx_texts, used_pids = await gather_context_sources(
            st, proj, message.from_user.id,
            max_chunks=settings.project_max_chunks,
            kinds=kinds, tags=tags,
            sources_mode=sources_mode, linked_ids=linked_ids,
        )

        model = await get_preferred_model(st, message.from_user.id)

        # –†–µ—à–∞–µ–º –ø–æ scope:
        prompt = message.text or ""
        final_ctx = ctx_texts if scope_mode in ("auto", "project") else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç
        if not proj and sources_mode in ("active", "linked") and scope_mode != "global":
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç: –æ—Ç–∫—Ä–æ–π Actions ‚Üí Projects (–∏–ª–∏ /project <name>). "
                                 "–õ–∏–±–æ –ø–æ—Å—Ç–∞–≤—å Sources=Global –≤ Actions.")
            return
        
        answer = await ask_llm(prompt, final_ctx, model=model)  # –≤–Ω—É—Ç—Ä–∏ ask_llm —Ç—ã —É–∂–µ —É–º–µ–µ—à—å —Å—à–∏–≤–∞—Ç—å ctx –≤ system

        # —à—Ç–∞–º–ø
        from app.services.memory import list_projects
        names = {p.id: p.name for p in await list_projects(st)}
        stamp = f"\n\n<i>Project: {escape(proj.name) if proj else '‚Äî'} ‚Ä¢ Scope: {scope_mode} ‚Ä¢ Sources: {sources_mode} ‚Ä¢ Model: {model}</i>"

        sent = await message.answer(answer + stamp)
        bm = BotMessage(
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            tg_message_id=sent.message_id,
            reply_to_user_msg_id=message.message_id,
            artifact_id=None, saved=False,
            project_id=(proj.id if proj else None),
            used_projects={"ids": used_pids},
        )
        st.add(bm); await st.commit()
        await sent.edit_reply_markup(reply_markup=answer_kb(sent.message_id, saved=False))