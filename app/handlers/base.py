from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from app.services.artifacts import get_or_create_project, create_note
from app.services.memory import (
    set_active_project, get_active_project, list_artifacts, clear_project,
    set_context_filters, set_preferred_model, get_preferred_model
)
from app.config import settings
from app.db import get_session
from app.states import state_manager
import logging

logger = logging.getLogger(__name__)
router = Router()
_pending_clear: dict[int, str] = {}

@router.message(Command("start"))
async def start(message: Message):
    from app.db import session_scope
    from app.services.memory import get_chat_flags
    from app.handlers.keyboard import build_kb_minimal
    async with session_scope() as st:
        if message.from_user:
            chat_on, _, _, _ = await get_chat_flags(st, message.from_user.id)
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç!\n"
                "<code>/project &lt;name&gt;</code> ‚Äî –≤—ã–±—Ä–∞—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
                "<code>/memory add &lt;text&gt;</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                "<code>/memory show</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç\n"
                "<code>/memory list</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤\n"
                "<code>/import</code> ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ .txt/.md/.json —Ñ–∞–π–ª\n"
                "<code>/ask &lt;–≤–æ–ø—Ä–æ—Å&gt;</code> ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å —Å —É—á—ë—Ç–æ–º –ø–∞–º—è—Ç–∏\n"
                "<code>/ctx kinds note,import</code> | <code>/ctx tags api,db</code> ‚Äî —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
                "<code>/memory clear</code> ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–¥–≤—É—Ö—à–∞–≥–æ–≤–∞—è)\n"
                "<code>/model gpt-5</code> | <code>/model gpt-5-thinking</code> ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
                "\n–û—Ç–∫—Ä–æ–π –º–µ–Ω—é: <code>/menu</code>",
                reply_markup=build_kb_minimal(chat_on)
            )

@router.message(Command("ctx"))
async def ctx_filters(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    args = (message.text.split(maxsplit=1) + [""])[1]
    if not args:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /ctx kinds note,import | /ctx tags api,db | /ctx reset")
        return
    if args.startswith("kinds"):
        kinds_csv = args.replace("kinds", "", 1).strip()
        await set_context_filters(st, message.from_user.id, kinds_csv=kinds_csv)
    elif args.startswith("tags"):
        tags_csv = args.replace("tags", "", 1).strip()
        await set_context_filters(st, message.from_user.id, tags_csv=tags_csv)
    elif args.strip() == "reset":
        await set_context_filters(st, message.from_user.id, kinds_csv="", tags_csv="")
    await st.commit()
    await message.answer("–û–∫. –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

@router.message(Command("model"))
async def set_model(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        current = await get_preferred_model(st, message.from_user.id)
        await message.answer(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <b>{current}</b>\n–î–æ—Å—Ç—É–ø–Ω–æ: gpt-5, gpt-5-thinking\n–ü—Ä–∏–º–µ—Ä: /model gpt-5-thinking")
        return
    chosen = parts[1].strip()
    applied = await set_preferred_model(st, message.from_user.id, chosen)
    await st.commit()
    await message.answer(f"–û–∫. –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{applied}</b>")

@router.message(Command("project"))
async def project_select(message: Message, session: AsyncSession = get_session()):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞: <code>/project &lt;name&gt;</code>")
        return
    name = parts[1].strip()
    st = await anext(session)  # –ø–æ–ª—É—á–∞–µ–º –û–î–ù–£ —Å–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º
    proj = await get_or_create_project(st, name)
    await set_active_project(st, message.from_user.id, proj)
    await st.commit()
    await message.answer(f"–ê–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ–µ–∫—Ç: <b>{proj.name}</b>")

@router.message(Command("memory"), F.text.regexp(r"^/memory\s+add\b"))
async def memory_add(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    from app.services.memory import get_active_project
    proj = await get_active_project(st, message.from_user.id)
    if not proj:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: <code>/project &lt;name&gt;</code>")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏: /memory add #tag1 #tag2 —Ç–µ–∫—Å—Ç
    text_part = message.text.split("add", 1)[1].strip()
    if not text_part:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç: <code>/memory add &lt;text&gt;</code>\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏: <code>/memory add #—Ç–µ–≥1 #—Ç–µ–≥2 —Ç–µ–∫—Å—Ç</code>")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏ —Ç–µ–∫—Å—Ç
    words = text_part.split()
    tags = []
    text_words = []
    
    for word in words:
        if word.startswith('#') and len(word) > 1:
            tags.append(word[1:])  # –£–±–∏—Ä–∞–µ–º #
        else:
            text_words.append(word)
    
    text = ' '.join(text_words)
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ 'note' –¥–ª—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
    if 'note' not in tags:
        tags.append('note')
    
    try:
        await create_note(
            st, proj, 
            title=text[:60], 
            text=text, 
            chunk_size=settings.chunk_size, 
            overlap=settings.chunk_overlap,
            tags=tags if tags else None
        )
        await st.commit()
        
        tags_str = ', '.join(tags) if tags else '–Ω–µ—Ç'
        await message.answer(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {tags_str}"
        )
    except Exception as e:
        logger.error(f"Error adding note: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏")

@router.message(Command("memory"), F.text.regexp(r"^/memory\s+list($|\s)"))
async def memory_list(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    from app.services.memory import get_active_project
    proj = await get_active_project(st, message.from_user.id)
    if not proj:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: <code>/project &lt;name&gt;</code>")
        return
    
    arts = await list_artifacts(st, proj)
    if not arts:
        await message.answer("üí≠ –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã: /memory list tag=code kind=import
    command_text = message.text.strip()
    filters = {}
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if 'tag=' in command_text:
        tag_filter = command_text.split('tag=')[1].split()[0]
        filters['tag'] = tag_filter
    if 'kind=' in command_text:
        kind_filter = command_text.split('kind=')[1].split()[0]
        filters['kind'] = kind_filter
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_arts = []
    for art in arts:
        include = True
        if 'tag' in filters and filters['tag'] not in (art.tags or []):
            include = False
        if 'kind' in filters and art.kind != filters['kind']:
            include = False
        if include:
            filtered_arts.append(art)
    
    if not filtered_arts:
        filter_desc = ', '.join([f"{k}={v}" for k, v in filters.items()])
        await message.answer(f"üîç –ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º {filter_desc} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    lines = [f"üìÅ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ <b>{proj.name}</b>:"]
    for i, a in enumerate(filtered_arts[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
        icon = "üìù" if a.kind == "note" else "üìÑ"
        tags_str = ", ".join(a.tags) if a.tags else "–Ω–µ—Ç"
        storage_info = f" üóÉÔ∏è" if a.storage_key else ""
        lines.append(f"{i}. {icon} <b>{a.title}</b>\n   üè∑Ô∏è {tags_str}{storage_info}")
    
    if len(filtered_arts) > 20:
        lines.append(f"\n... –∏ –µ—â—ë {len(filtered_arts) - 20} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    
    if filters:
        filter_desc = ', '.join([f"{k}={v}" for k, v in filters.items()])
        lines.append(f"\nüîç –§–∏–ª—å—Ç—Ä: {filter_desc}")
    
    await message.answer("\n".join(lines))

@router.message(Command("memory"), F.text.regexp(r"^/memory\s+show$"))
async def memory_show(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    from app.services.memory import get_active_project
    proj = await get_active_project(st, message.from_user.id)
    if not proj:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: <code>/project &lt;name&gt;</code>")
        return
    arts = await list_artifacts(st, proj)
    if not arts:
        await message.answer("–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞.")
        return
    preview = []
    for a in arts[:10]:
        preview.append(f"[{a.kind}] <b>{a.title}</b>\n{(a.raw_text[:200] + '...') if len(a.raw_text)>200 else a.raw_text}")
    await message.answer("\n\n".join(preview))

@router.message(Command("memory"), F.text.regexp(r"^/memory\s+clear$"))
async def memory_clear_ask(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    proj = await get_active_project(st, message.from_user.id)
    if not proj:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: <code>/project &lt;name&gt;</code>")
        return
    _pending_clear[message.from_user.id] = proj.name
    await message.answer(f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: /memory clear {proj.name}")

@router.message(Command("memory"), F.text.regexp(r"^/memory\s+clear\s+.+$"))
async def memory_clear_confirm(message: Message, session: AsyncSession = get_session()):
    st = await anext(session)
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>/memory clear &lt;project&gt;</code>")
        return
    proj_name = parts[2]
    expected = _pending_clear.get(message.from_user.id)
    if expected != proj_name:
        await message.answer("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–æ –∏–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏.")
        return
    proj = await get_active_project(st, message.from_user.id)
    if not proj or proj.name != proj_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: <code>/project &lt;name&gt;</code>")
        return
    await clear_project(st, proj)
    await st.commit()
    _pending_clear.pop(message.from_user.id, None)
    await message.answer("–ü–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")