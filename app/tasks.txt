
ProjectMemoryBot ‚Äî Final Sprint TODO
====================================

–¶–µ–ª—å: –¥–æ–±–∏—Ç—å –¥–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö –±–ª–æ–∫–∞ ‚Äî **–ø—Ä–µ—Å–µ—Ç—ã —Ç–µ–≥–æ–≤** (—É–¥–æ–±–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ç–µ–≥–æ–≤ —Å ¬´—á–∏–ø—Å–∞–º–∏¬ª + —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥)
–∏ **Cleanup** (—É–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ/—Ç–µ–≥—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º), –ø–ª—é—Å –º–µ–ª–∫–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é.

–§–æ—Ä–º–∞—Ç: –Ω–∏–∂–µ —Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã/–ø–∞—Ç—á–∏. –ö–æ–ø–∏—Ä—É–π—Ç–µ _1-–≤-1_. –ü–æ—Å–ª–µ –ø—Ä–∞–≤–æ–∫ –ø—Ä–æ–≥–Ω–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å `linkbot`.

----------------------------------------------------------------
0) –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ (—á—Ç–æ —É–∂–µ –µ—Å—Ç—å)
----------------------------------------------------------------
- modal-–ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ `show_panel()` –∏ –ø–æ–ª–µ `user_state.last_panel_msg_id` ‚Äî —É–∂–µ –≤ –∫–æ–¥–µ.
- `session_scope()` ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é `async with`.
- –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º: Save / Summary / Tag / Delete / Refine ‚Äî —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç.
- –∏–º–ø–æ—Ä—Ç txt/zip, –∞–≤—Ç–æ—Ç–µ–≥ –¥–∞—Ç—ã `rel-YYYY-MM-DD`, `.pmignore`, —ç–∫—Å–ø–æ—Ä—Ç ZIP, Repo ‚Äî –µ—Å—Ç—å.

–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ **—Ç–µ–≥–∏** –∏ **cleanup**.

----------------------------------------------------------------
1) –ú–∏–≥—Ä–∞—Ü–∏–∏: –ø—Ä–µ—Å–µ—Ç—ã —Ç–µ–≥–æ–≤ (–µ—Å–ª–∏ –µ—â—ë –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω—ã)
----------------------------------------------------------------
–§–∞–π–ª: `alembic/versions/0006_tag_presets.py`

```python
from alembic import op
import sqlalchemy as sa

revision = "0006_tag_presets"
down_revision = "0005_repos"  # –ø–æ–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π id

def upgrade():
    op.create_table("tag_presets",
        sa.Column("id", sa.Integer(), primary_key=True),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("tag", sa.String(64), nullable=False),
    )
    op.create_index("ix_tag_presets_user_proj", "tag_presets", ["user_id", "project_id"])

def downgrade():
    op.drop_index("ix_tag_presets_user_proj", table_name="tag_presets")
    op.drop_table("tag_presets")
```

–ö–æ–º–∞–Ω–¥–∞:
```
docker compose run --rm bot alembic upgrade head
```

----------------------------------------------------------------
2) –°–µ—Ä–≤–∏—Å –ø—Ä–µ—Å–µ—Ç–æ–≤ —Ç–µ–≥–æ–≤
----------------------------------------------------------------
–§–∞–π–ª (–Ω–æ–≤—ã–π): `app/services/tags.py`

```python
from __future__ import annotations
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete, insert, Table, Column, Integer, BigInteger, String, MetaData

metadata = MetaData()
tag_presets = Table(
    "tag_presets", metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", BigInteger, nullable=False),
    Column("project_id", Integer, nullable=True),
    Column("tag", String(64), nullable=False),
)

DEFAULT_PRESETS = [
    "api","db","infra","matching","ui","auth",
    "spec","plan","answer","summary","pinned","release-notes"
]

async def get_presets(st: AsyncSession, user_id: int, project_id: int | None):
    res = await st.execute(
        select(tag_presets.c.tag).where(
            tag_presets.c.user_id == user_id,
            tag_presets.c.project_id == project_id
        )
    )
    tags = [r[0] for r in res.fetchall()]
    return tags or DEFAULT_PRESETS

async def add_preset(st: AsyncSession, user_id: int, project_id: int | None, tag: str):
    tag = tag.strip().lower()
    if not tag:
        return
    await st.execute(insert(tag_presets).values(user_id=user_id, project_id=project_id, tag=tag))

async def clear_presets(st: AsyncSession, user_id: int, project_id: int | None):
    await st.execute(delete(tag_presets).where(tag_presets.c.user_id == user_id,
                                               tag_presets.c.project_id == project_id))
```

----------------------------------------------------------------
3) –¢–µ–≥–∏ –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º: ¬´—á–∏–ø—Å—ã¬ª –ø—Ä–µ—Å–µ—Ç–æ–≤ + —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
----------------------------------------------------------------
–§–∞–π–ª: `app/handlers/answer_actions.py` ‚Äî **–¥–æ–±–∞–≤—å—Ç–µ/–∑–∞–º–µ–Ω–∏—Ç–µ** –±–ª–æ–∫–∏ –Ω–∏–∂–µ.

```python
from __future__ import annotations
import asyncio
import sqlalchemy as sa
from aiogram import Router, F
from aiogram.types import CallbackQuery, ForceReply, Message, InlineKeyboardMarkup, InlineKeyboardButton
from app.db import session_scope
from app.models import BotMessage, Artifact, artifact_tags
from app.services.memory import get_active_project
from app.services.tags import get_presets

router = Router()

# --- –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ—Å–µ—Ç–æ–≤ (3 –≤ —Ä—è–¥) ---
def build_tag_kb(tags: list[str], msg_id: int):
    rows, row = [], []
    for i, t in enumerate(tags, 1):
        row.append(InlineKeyboardButton(text=t, callback_data=f"ans:tagtoggle:{msg_id}:{t}"))
        if i % 3 == 0:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"ans:tagdone:{msg_id}"),
        InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–∏", callback_data=f"ans:tagfree:{msg_id}")
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# --- –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã (–∫–ª—é—á = message_id –æ—Ç–≤–µ—Ç–∞) ---
TAG_CACHE: dict[int, set[str]] = {}

@router.callback_query(F.data.startswith("ans:tag:"))
async def ans_tag(cb: CallbackQuery):
    msg_id = int(cb.data.split(":")[-1])
    async with session_scope() as st:
        # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç (–¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤): –ø–æ BotMessage -> project_id
        bm = (await st.execute(sa.select(BotMessage).where(BotMessage.tg_message_id == msg_id))).scalars().first()
        pid = bm.project_id if bm else None
        presets = await get_presets(st, cb.from_user.id, pid)
    TAG_CACHE[msg_id] = set()
    await cb.message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ (—Ç–∞–ø –ø–æ –∫–Ω–æ–ø–∫–∞–º), –ø–æ—Ç–æ–º ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                            reply_markup=build_tag_kb(presets, msg_id))
    await cb.answer()

@router.callback_query(F.data.startswith("ans:tagtoggle:"))
async def ans_tag_toggle(cb: CallbackQuery):
    _, _, msg_id, tag = cb.data.split(":")
    msg_id = int(msg_id)
    cur = TAG_CACHE.get(msg_id, set())
    if tag in cur: cur.remove(tag)
    else: cur.add(tag)
    TAG_CACHE[msg_id] = cur
    await cb.answer(f"{'+' if tag in cur else '-'} {tag}")

@router.callback_query(F.data.startswith("ans:tagdone:"))
async def ans_tag_done(cb: CallbackQuery):
    msg_id = int(cb.data.split(":")[-1])
    tags = sorted(TAG_CACHE.get(msg_id, set()))
    if not tags:
        return await cb.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞.", show_alert=True)
    async with session_scope() as st:
        bm = (await st.execute(sa.select(BotMessage).where(BotMessage.tg_message_id == msg_id))).scalars().first()
        if not bm:
            return await cb.answer("Not found", show_alert=True)
        text = cb.message.text or cb.message.caption or ""
        target_pid = bm.project_id
        if not bm.saved or not bm.artifact_id:
            if not target_pid:
                return await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –≤ Actions ‚Üí Projects.")
            base = Artifact(project_id=target_pid, kind="answer", title="Chat answer", raw_text=text, pinned=False)
            st.add(base); await st.flush()
            bm.artifact_id = base.id; bm.saved = True; st.add(bm)
        # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–≥–∏
        await st.execute(sa.delete(artifact_tags).where(artifact_tags.c.artifact_id == bm.artifact_id))
        if tags:
            await st.execute(sa.insert(artifact_tags),
                             [{"artifact_id": bm.artifact_id, "tag": t} for t in tags])
        await st.commit()
    TAG_CACHE.pop(msg_id, None)
    await cb.message.answer(f"üè∑ –¢–µ–≥–∏: {', '.join(tags)}")
    await cb.answer()

@router.callback_query(F.data.startswith("ans:tagfree:"))
async def ans_tag_free(cb: CallbackQuery):
    msg_id = int(cb.data.split(":")[-1])
    await cb.message.answer("–°–≤–æ–∏ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=ForceReply(selective=True))
    await cb.answer()

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("–°–≤–æ–∏ —Ç–µ–≥–∏"))
async def tags_free_reply(message: Message):
    tags = [t.strip() for t in (message.text or "").split(",") if t.strip()]
    if not tags:
        return await message.answer("–ü—É—Å—Ç–æ.")
    async with session_scope() as st:
        bm = (await st.execute(sa.select(BotMessage).where(BotMessage.user_id == message.from_user.id)
              .order_by(BotMessage.created_at.desc()).limit(1))).scalars().first()
        if not bm:
            return await message.answer("–ù–µ –Ω–∞—à—ë–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–≥–æ–≤.")
        text = message.reply_to_message and (message.reply_to_message.text or "") or ""
        target_pid = bm.project_id
        if not bm.saved or not bm.artifact_id:
            if not target_pid:
                return await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç.")
            base = Artifact(project_id=target_pid, kind="answer", title="Chat answer", raw_text=text, pinned=False)
            st.add(base); await st.flush()
            bm.artifact_id = base.id; bm.saved = True; st.add(bm)
        await st.execute(sa.delete(artifact_tags).where(artifact_tags.c.artifact_id == bm.artifact_id))
        await st.execute(sa.insert(artifact_tags),
                         [{"artifact_id": bm.artifact_id, "tag": t} for t in tags])
        await st.commit()
    await message.answer(f"üè∑ –¢–µ–≥–∏: {', '.join(tags)}")
```

----------------------------------------------------------------
4) Cleanup: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –∏/–∏–ª–∏ —Ç–µ–≥—É (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
----------------------------------------------------------------
–§–∞–π–ª (–Ω–æ–≤—ã–π): `app/handlers/cleanup.py`

```python
from __future__ import annotations
import re, datetime as dt
import sqlalchemy as sa
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
from app.db import session_scope
from app.ui import show_panel
from app.services.memory import get_active_project
from app.models import Artifact, artifact_tags

router = Router()

def cleanup_menu():
    rows = [[
        InlineKeyboardButton(text="üóì By date", callback_data="cleanup:bydate"),
        InlineKeyboardButton(text="üè∑ By tag", callback_data="cleanup:bytag"),
    ]]
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.callback_query(F.data == "cleanup:open")
async def cleanup_open(cb: CallbackQuery):
    async with session_scope() as st:
        await show_panel(st, cb.message.bot, cb.message.chat.id, cb.from_user.id,
                         "Cleanup ‚Äî –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", cleanup_menu())
    await cb.answer()

# --- BY DATE ---
@router.callback_query(F.data == "cleanup:bydate")
async def cleanup_bydate(cb: CallbackQuery):
    await cb.message.answer(
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (—É–¥–∞–ª–∏–º —Å –≠–¢–û–ô –¥–∞—Ç—ã –∏ –ø–æ–∑–∂–µ):",
        reply_markup=ForceReply(selective=True)
    )
    await cb.answer()

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ"))
async def cleanup_date_reply(message: Message):
    m = re.search(r"(\d{4}-\d{2}-\d{2})", message.text or "")
    if not m:
        return await message.answer("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 2025-09-13")
    d0 = dt.date.fromisoformat(m.group(1))
    async with session_scope() as st:
        proj = await get_active_project(st, message.from_user.id)
        if not proj:
            return await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç (Actions ‚Üí Projects).")
        since = dt.datetime.combine(d0, dt.time.min)
        cnt = (await st.execute(sa.select(sa.func.count()).select_from(Artifact)
               .where(Artifact.project_id == proj.id, Artifact.created_at >= since))).scalar_one()
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=f"‚úÖ Delete {cnt}", callback_data=f"cleanup:confirm:date:{d0.isoformat()}"),
        InlineKeyboardButton(text="‚úñ Cancel", callback_data="cleanup:cancel")
    ]])
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {cnt}. –£–¥–∞–ª–∏—Ç—å?", reply_markup=kb)

@router.callback_query(F.data.startswith("cleanup:confirm:date:"))
async def cleanup_confirm_date(cb: CallbackQuery):
    d = cb.data.split(":")[-1]
    since = dt.datetime.combine(dt.date.fromisoformat(d), dt.time.min)
    async with session_scope() as st:
        proj = await get_active_project(st, cb.from_user.id)
        if not proj:
            return await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", show_alert=True)
        res = await st.execute(sa.delete(Artifact).where(Artifact.project_id == proj.id,
                                                        Artifact.created_at >= since))
        await st.commit()
    await cb.message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ (—Å {d}): {res.rowcount or 0}")
    await cb.answer()

# --- BY TAG ---
@router.callback_query(F.data == "cleanup:bytag")
async def cleanup_bytag(cb: CallbackQuery):
    await cb.message.answer(
        "–í–≤–µ–¥–∏ —Ç–µ–≥ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ) –∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å —Å * –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: rel-2025-09-*)",
        reply_markup=ForceReply(selective=True)
    )
    await cb.answer()

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("–í–≤–µ–¥–∏ —Ç–µ–≥ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"))
async def cleanup_tag_reply(message: Message):
    pattern = (message.text or "").strip()
    async with session_scope() as st:
        proj = await get_active_project(st, message.from_user.id)
        if not proj:
            return await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç (Actions ‚Üí Projects).")
        if pattern.endswith("*"):
            like = pattern[:-1] + "%"
            sel = sa.select(artifact_tags.c.artifact_id).where(artifact_tags.c.tag.like(like))
        else:
            sel = sa.select(artifact_tags.c.artifact_id).where(artifact_tags.c.tag == pattern)
        ids = [r[0] for r in (await st.execute(sel)).fetchall()]
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=f"‚úÖ Delete {len(ids)}", callback_data=f"cleanup:confirm:tag"),
        InlineKeyboardButton(text="‚úñ Cancel", callback_data="cleanup:cancel")
    ]])
    # —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ id –≤ ¬´–ø—Ä–æ—Å—Ç–æ–º –∫–µ—à–µ¬ª (–∫–ª—é—á = user_id)
    from app.services.memory import _ensure_user_state
    async with session_scope() as st:
        stt = await _ensure_user_state(st, message.from_user.id)
        # hack: –ø–æ–ª–æ–∂–∏–º –≤ context_tags –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
        stt.context_tags = ",".join(str(i) for i in ids)
        await st.commit()
    await message.answer(f"–ü–æ–¥ —Ç–µ–≥ {pattern} –ø–æ–¥—Ö–æ–¥–∏—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {len(ids)}. –£–¥–∞–ª–∏—Ç—å?", reply_markup=kb)

@router.callback_query(F.data == "cleanup:confirm:tag")
async def cleanup_confirm_tag(cb: CallbackQuery):
    from app.services.memory import _ensure_user_state
    async with session_scope() as st:
        stt = await _ensure_user_state(st, cb.from_user.id)
        ids = [int(x) for x in (stt.context_tags or "").split(",") if x.strip().isdigit()]
        stt.context_tags = None
        if not ids:
            await st.commit()
            return await cb.answer("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å", show_alert=True)
        res = await st.execute(sa.delete(Artifact).where(Artifact.id.in_(ids)))
        await st.commit()
    await cb.message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ –ø–æ —Ç–µ–≥—É: {res.rowcount or 0}")
    await cb.answer()

@router.callback_query(F.data == "cleanup:cancel")
async def cleanup_cancel(cb: CallbackQuery):
    await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
```

–ö–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é **Actions** –≤—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ (`cleanup:open`). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Ä—è–¥–æ–º —Å Export/Repo.

----------------------------------------------------------------
5) –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–µ–Ω—é (–µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
----------------------------------------------------------------
`app/handlers/menu.py` (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å Actions-–º–µ–Ω—é) ‚Äî –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤—å—Ç–µ:

```python
[InlineKeyboardButton(text="üßπ Cleanup by date/tag", callback_data="cleanup:open")],
```

–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á—ë–Ω:

```python
# app/handlers/__init__.py
from .cleanup import router as cleanup_router
router.include_router(cleanup_router)
```

----------------------------------------------------------------
6) –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
----------------------------------------------------------------
1) –ú–∏–≥—Ä–∞—Ü–∏–∏:
```
docker compose --env-file .env run --rm bot alembic upgrade head
```

2) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:
```
linkbot
```

3) –ü—Ä–æ–≤–µ—Ä–∫–∞:
- –û—Ç–≤–µ—Ç –±–æ—Ç–∞ ‚Üí –Ω–∞–∂–∞—Ç—å **üè∑ Tag** ‚Üí –≤—ã–±—Ä–∞—Ç—å ¬´—á–∏–ø—Å–∞–º–∏¬ª ‚Üí ¬´–ì–æ—Ç–æ–≤–æ¬ª ‚Üí –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è –∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è ¬´–¢–µ–≥–∏: ‚Ä¶¬ª.
- **Actions ‚Üí üßπ Cleanup by date/tag** ‚Üí –ø—Ä–æ–π—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ¬´By date¬ª –∏ ¬´By tag¬ª; –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∏—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ.
- –ò–º–ø–æ—Ä—Ç zip/txt ‚Üí —Ç–µ–≥ `rel-YYYY-MM-DD` –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è, `.pmignore` —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —à—É–º.
- –≠–∫—Å–ø–æ—Ä—Ç –∏ Repo ‚Äî –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª–∏, –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ.

----------------------------------------------------------------
7) –ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ Telegram
----------------------------------------------------------------
- –ë–æ—Ç **–Ω–µ –º–æ–∂–µ—Ç** —É–¥–∞–ª—è—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ; —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏. –î–ª—è ¬´Delete¬ª –º—ã —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –ø–ª–∞—à–∫—É ¬´üßπ –û—á–∏—â–µ–Ω–æ¬ª, –∫–æ—Ç–æ—Ä—É—é –∞–≤—Ç–æ—É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3‚Äì5 —Å–µ–∫.
- –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω quiet mode, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç ¬´–±–æ–ª—Ç–∞—Ç—å¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∏/—Å—Ç–∞—Ç—É—Å—ã.

–ì–æ—Ç–æ–≤–æ. –≠—Ç–æ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –±–ª–æ–∫–∏ ¬´–ü—Ä–µ—Å–µ—Ç—ã —Ç–µ–≥–æ–≤¬ª –∏ ¬´Cleanup¬ª –∏ –¥–æ–≤–µ—Å—Ç–∏ UX –¥–æ —Ñ–∏–Ω–∞–ª–∞.
